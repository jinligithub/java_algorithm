题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

 

栈的特点：先进后出



算法思路：

1.利用一个辅助栈来模拟压入和弹出的操作 

2.对输入的序列的元素，先入栈，如果栈不为空，就查看栈顶元素和弹出序列的值是否相同，相同就把栈顶出栈，弹出序列的当前值往后移动一位，继续判断下一个压入序列的值与弹出序列的值有没有相同的。

具体做法：先将第一个元素放入栈中，这里是1，然后判断栈顶元素是不是出栈顺序的第一个元素，这里是4，很显然1≠4，所以我们继续压栈，直到相等以后开始出栈，出栈一个元素，则将出栈顺序向后移动一位，直到不相等，

3.这样循环等压栈顺序遍历完成，如果辅助栈还不为空，说明弹出序列不是该栈的弹出顺序。

从题目分析：

入栈顺序：1,2,3,4,5

出栈顺序：4,5,3,2,1



步骤如下：

1.首先1入辅助栈，此时栈顶1≠4，继续入栈2

2.此时栈顶2≠4，继续入栈3

3.此时栈顶3≠4，继续入栈4

4.此时栈顶4＝4，出栈4，弹出序列向后一位，此时为5，,辅助栈里面是1,2,3

5.此时栈顶3≠5，继续入栈5

6.此时栈顶5=5，出栈5,弹出序列向后一位，此时为3，,辅助栈里面是1,2,3

7.此时栈顶3=3，把3出栈，辅助栈里面还有1,2

8.此时栈顶2=2，把2出栈，辅助栈里面 还有1

9.此时栈顶1=1，把1出栈，辅助栈里为空，说明该序列是正确的出栈序列

Stack()：方法说明：

peek() 表示的是查看堆栈顶部的对象，但不从堆栈中移除它。 

push(E item) 表示的是把项压入堆栈顶部。 

pop() 表示的是移除堆栈顶部的对象，并作为此函数的值返回该对象。 

empty() 表示的是测试堆栈是否为空。  

search(Object o) 表示的是返回对象在堆栈中的位置，以 1 为基数。

代码如下：

import java.util.ArrayList;
import java.util.Stack;
 
public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
        Stack<Integer> s=new Stack<Integer>();
        if(pushA.length==0||popA.length==0)//判断两个序列是否为空，为空返回false
            return false;
        int flag=0;//标记出栈的顺序
        for(int i=0;i<pushA.length;i++){
            s.push(pushA[i]);
            while(!s.empty()&&s.peek()==popA[flag]){//当栈不为空，且入栈栈顶元素和出栈栈顶元素相同时，才出栈
                s.pop();
                flag++;//出栈一次，出现序列向后移动一位，继续比较后边的元素
            }
        }
        return s.empty();
    }
}
